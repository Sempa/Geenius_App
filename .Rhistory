l_with_lpddi_offset = ifelse(t_since_ln < lpddi_val,0, l))
auc <- trapz(likelihood_non_normalised$t_since_ln, likelihood_non_normalised$l_with_lpddi_offset)
likelihood_normalised <- likelihood_non_normalised %>%
mutate(
time_t = t_since_ln,
bigL = l_with_lpddi_offset / auc
)
}
return(likelihood_normalised)
}
# source("likelihood_function - geenius.R")
complete_dataset <- data.frame(s_id = NA, lpddi = NA, epddi = NA ,  l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
# assay_value_th_genious <- assay_value_th_genious
GV_interval_step_genious <- 1
for (j in 1:length(pt_dat$s_id)) {
# browser()
assay_value_th_genious <- pt_dat$assay_value[j]
GV_interval_length_genious <- pt_dat$epddi[j]
lpddi_val = pt_dat$lpddi[j]
dat_combine <- data.frame(s_id = NA, lpddi = NA, epddi = NA , l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
likelihood <- likelihood_fun(
param_datset = likelihood_param_quad_function(
dat = as.matrix(pr_t_logit_cubic_Geenius),
target_assay_value = assay_value_th_genious,
around_assay_value = seq(0.01, 3, .15),
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious) # GV_interval_step_genious
),
assay_value = assay_value_th_genious,
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious), # GV_interval_step_genious,
lpddi_val = lpddi_val
) %>%
dplyr::mutate(assay_value = assay_value_th_genious, s_id = pt_dat$s_id[j],
lpddi = pt_dat$lpddi[j], epddi = pt_dat$epddi[j], int_length = pt_dat$epddi[j]- pt_dat$lpddi[j]) %>%
dplyr::select(s_id, lpddi, epddi, l, time_t, bigL, assay_value, int_length)
# browser()
dat_combine <- rbind(dat_combine, likelihood)
# }
complete_dataset <- rbind(complete_dataset, dat_combine)
}
complete_dataset <- complete_dataset %>%
filter(!is.na(time_t)) %>%
dplyr::mutate(`assay value` = as.factor(assay_value))
View(complete_dataset)
percentiles_table <- complete_dataset %>%
dplyr::mutate(id = paste(s_id, assay_value, sep = '_'))%>%
# filter(time_t > lpddi) %>%
group_by(s_id) %>%
dplyr::mutate(cum_posterior = cumsum(bigL))
View(percentiles_table)
cumulative_posterior <- complete_dataset %>%
# dplyr::filter(time_t > lpddi) %>%
dplyr::group_by(s_id) %>%
dplyr::mutate(cumsum_posterior = cumsum(bigL)) %>%
dplyr::mutate(f_T = f_T,
t1 = time_t,
window_size= round(int_length * f_T, 0),
t1_f_T = ifelse(t1 + window_size <= int_length, t1 + window_size, int_length)
) %>%
dplyr::mutate(id  = paste(s_id, t1, sep = '_'))
t1FT_records <- cumulative_posterior %>%
ungroup() %>%
group_by(id) %>%
filter(window_size <=time_t) %>%
ungroup() %>%
dplyr::select(id, bigL, cumsum_posterior)
merged_dataset <- cumulative_posterior %>%
dplyr::mutate(id  = paste(s_id, t1_f_T, sep = '_')) %>%
right_join(t1FT_records, by = 'id') %>%
distinct(id, .keep_all = T) %>%
dplyr::mutate(window_probs_t1 = cumsum_posterior.y - cumsum_posterior.x)
summary_dataset_2 <- merged_dataset %>%
dplyr::filter(!is.na(s_id)) %>%
group_by(s_id) %>%
dplyr::mutate(visits = 1:length(s_id),
n_visits = max(visits)) %>%
dplyr::filter(n_visits >1) %>%
ungroup()
summary_dataset_3 <- summary_dataset_2 %>%
group_by(s_id) %>%
dplyr::summarise(max_window_prob = approx(x = window_probs_t1, y = time_t,
xout = max(window_probs_t1, na.rm = T))$y # , method = "constant", ties = mean, rule = 2
)
f_t_results <- merged_dataset %>%
dplyr::filter(!is.na(s_id)) %>%
dplyr::mutate(id = paste(s_id, time_t, sep = '_')) %>%
right_join(summary_dataset_3 %>% mutate(id = paste(s_id, max_window_prob, sep = '_'))) %>%
dplyr::mutate(`f_t ide radius` = (t1_f_T - t1)/2,
`f_t ide midpoint` = t1 + `f_t ide radius`) %>%
right_join(pt_dat, by = 's_id') %>%
dplyr::select(s_id, assay_value = assay_value.x, int_length, f_T, window_probs_t1, ide_f_t_lower = t1,
window_size, ide_f_t_upper = t1_f_T, `f_t ide radius`,
`f_t ide midpoint`)
cumulative_posterior <- complete_dataset %>%
# dplyr::filter(time_t > lpddi) %>%
dplyr::filter(!is.na(s_id)) %>%
group_by(s_id) %>%
dplyr::mutate(visits = 1:length(s_id),
n_visits = max(visits)) %>%
dplyr::filter(n_visits >1) %>%
ungroup() %>%
group_by(s_id) %>%
dplyr::mutate(cumsum_posterior = cumsum(bigL)) %>%
dplyr::mutate(f_T = f_T,
t1 = time_t,
window_size= round(int_length * f_T, 0),
t1_f_T = ifelse(t1 + window_size <= int_length, t1 + window_size, int_length)
) %>%
mutate(id  = paste(s_id, t1, sep = '_'))
dt2 <- data.frame(id = NA, f_p = NA, cum_prob = NA, sum_prob = NA, t_1_val = NA, t_2_val = NA, t_diff = NA)
x <- unique(cumulative_posterior$s_id)
for (i in 1:length(unique(cumulative_posterior$s_id))) {
dat <- cumulative_posterior %>%
ungroup() %>%
filter(s_id == x[i]) %>%
dplyr::select(s_id, time_t, cumsum_posterior)
t_1 <- dat$time_t[1]
cum_prob <- dat$cumsum_posterior[1]
max_time <- max(dat$time_t, na.rm = T)
# print(i)
#browser()
dt <- data.frame(id = NA, f_p = NA, cum_prob = NA, sum_prob = NA, t_1_val = NA, t_2_val = NA, t_diff = NA)
while ((cum_prob) < (1 - f_p) && t_1 <= max_time) {
# print(t_1)
prob_sum <- cum_prob + f_p
t_2 <- round(approx(x = dat$cumsum_posterior, y = dat$time_t,
xout = prob_sum)$y, 0) #, method = "constant", ties = mean, rule = 2
dt <- rbind(dt, cbind(id = x[i], f_p = f_p, cum_prob = cum_prob, sum_prob = prob_sum, t_1_val = t_1, t_2_val = t_2, t_diff = t_2 - t_1))
t_1 <- t_1 + 1
cum_prob <- dat$cumsum_posterior[dat$time_t==t_1]
}
dt2 <- rbind(dt2, dt)
}
ide_summary_table <- dt2 %>%
dplyr::filter(!is.na(id)) %>%
group_by(id) %>%
dplyr::mutate(min_diff = min(t_diff, na.rm = T)) %>%
filter(t_diff == min_diff) %>%
dplyr::mutate(ide_lower = min(t_1_val, na.rm = T),
ide_upper = max(t_2_val, na.rm = T)
) %>%
dplyr::mutate(ide_midpoint = ide_lower + (ide_upper-ide_lower)/2,
ide_radius = (ide_upper-ide_lower)/2) %>%
ungroup() %>%
distinct(id, .keep_all = T) %>%
dplyr::select(id, f_p, ide_lower, ide_upper, ide_midpoint, ide_radius) %>%
left_join(f_t_results %>% mutate(id = s_id), by = 'id') %>%
right_join(pt_dat %>% mutate(id = s_id), by = 'id') %>%
# dplyr::mutate(assay_value.y) %>%
dplyr::select(id, assay_value = assay_value.y, f_T, f_p, int_length, `f_p ide lower` = ide_lower, `f_p ide upper` = ide_upper,
`f_p ide midpoint` = ide_midpoint, `f_p ide radius` = ide_radius,
`f_t window prob` = window_probs_t1, `f_t window_size` = window_size, `f_t ide lower` = ide_f_t_lower,
`f_t ide upper` = ide_f_t_upper, `f_t ide midpoint`,
`f_t ide radius`
)
View(ide_summary_table)
f_T <- 0.2
f_p <- .5
pt_dat <-  data.frame(s_id = 1, assay_value = c(1.76), lpddi = c(29), epddi = c(425)) #%>% #%>% # read_csv("tbt_dat.csv")d
# source("likelihood_function - geenius.R")
complete_dataset <- data.frame(s_id = NA, lpddi = NA, epddi = NA ,  l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
# assay_value_th_genious <- assay_value_th_genious
GV_interval_step_genious <- 1
for (j in 1:length(pt_dat$s_id)) {
# browser()
assay_value_th_genious <- pt_dat$assay_value[j]
GV_interval_length_genious <- pt_dat$epddi[j]
lpddi_val = pt_dat$lpddi[j]
dat_combine <- data.frame(s_id = NA, lpddi = NA, epddi = NA , l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
likelihood <- likelihood_fun(
param_datset = likelihood_param_quad_function(
dat = as.matrix(pr_t_logit_cubic_Geenius),
target_assay_value = assay_value_th_genious,
around_assay_value = seq(0.01, 3, .15),
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious) # GV_interval_step_genious
),
assay_value = assay_value_th_genious,
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious), # GV_interval_step_genious,
lpddi_val = lpddi_val
) %>%
dplyr::mutate(assay_value = assay_value_th_genious, s_id = pt_dat$s_id[j],
lpddi = pt_dat$lpddi[j], epddi = pt_dat$epddi[j], int_length = pt_dat$epddi[j]- pt_dat$lpddi[j]) %>%
dplyr::select(s_id, lpddi, epddi, l, time_t, bigL, assay_value, int_length)
# browser()
dat_combine <- rbind(dat_combine, likelihood)
# }
complete_dataset <- rbind(complete_dataset, dat_combine)
}
complete_dataset <- complete_dataset %>%
filter(!is.na(time_t)) %>%
dplyr::mutate(`assay value` = as.factor(assay_value))
plot2 <- ggplot(
data = complete_dataset,
aes(x = time_t, y = bigL, colour = `assay value`)
) +
geom_line(size = 2.0) +
xlab("Date of infection (days)") +
ylab("Posterior Density") +
theme_bw() +
scale_x_reverse(expand = c(0, 0)) +
scale_y_continuous(breaks = c(0)) +
scale_colour_manual(values = c("#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C", "#FB9A99", "#E31A1C")) + # , "#6A3D9A"
coord_fixed(ratio = 1) +
theme(
text = element_text(size = 18),
axis.line = element_line(colour = "black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank(),
panel.border = element_blank(),
aspect.ratio = 1,
plot.margin = unit(c(0, 0, 0, 0), "null")
)
plot2
percentiles_table <- complete_dataset %>%
dplyr::mutate(id = paste(s_id, assay_value, sep = '_'))%>%
# filter(time_t > lpddi) %>%
group_by(s_id) %>%
dplyr::mutate(cum_posterior = cumsum(bigL)) %>%
dplyr::summarise(`mode value` = approx(x = bigL, y = time_t,
xout = max(bigL, na.rm = T))$y, # , method = "constant", ties = mean, rule = 2
`5th percentile` = round(approx(x = cum_posterior, y = time_t,
xout = 0.05)$y, 0), # , method = "constant", ties = mean, rule = 2
`25th percentile` = round(approx(x = cum_posterior, y = time_t,
xout = 0.25)$y, 0), # , method = "constant", ties = mean, rule = 2
`50th percentile` = round(approx(x = cum_posterior, y = time_t,
xout = 0.5)$y, 0), # , method = "constant", ties = mean, rule = 2
`75th percentile` = round(approx(x = cum_posterior, y = time_t,
xout = 0.75)$y, 0), # , method = "constant", ties = mean, rule = 2
`95th percentile` = round(approx(x = cum_posterior, y = time_t,
xout = 0.95)$y, 0), #, method = "constant", ties = mean, rule = 2
`68_2th percentile` = round(approx(x = cum_posterior, y = time_t,
xout = 0.682)$y, 0) #, method = "constant", ties = mean, rule = 2
) %>%
right_join(pt_dat, by  = 's_id') %>%
# mutate(assay_value = pt_dat$assay_value) %>% #seq(0.05, 2, 0.05)
dplyr::select(s_id, `assay value` = assay_value, `mode value`, `5th percentile`,
`25th percentile`, `50th percentile`, `68.2th percentile` = `68_2th percentile`,
`75th percentile`, `95th percentile`)
cumulative_posterior <- complete_dataset %>%
# dplyr::filter(time_t > lpddi) %>%
dplyr::group_by(s_id) %>%
dplyr::mutate(cumsum_posterior = cumsum(bigL)) %>%
dplyr::mutate(f_T = f_T,
t1 = time_t,
window_size= round(int_length * f_T, 0),
t1_f_T = ifelse(t1 + window_size <= int_length, t1 + window_size, int_length)
) %>%
dplyr::mutate(id  = paste(s_id, t1, sep = '_'))
t1FT_records <- cumulative_posterior %>%
ungroup() %>%
group_by(id) %>%
filter(window_size <=time_t) %>%
ungroup() %>%
dplyr::select(id, bigL, cumsum_posterior)
merged_dataset <- cumulative_posterior %>%
dplyr::mutate(id  = paste(s_id, t1_f_T, sep = '_')) %>%
right_join(t1FT_records, by = 'id') %>%
distinct(id, .keep_all = T) %>%
dplyr::mutate(window_probs_t1 = cumsum_posterior.y - cumsum_posterior.x)
summary_dataset_2 <- merged_dataset %>%
dplyr::filter(!is.na(s_id)) %>%
group_by(s_id) %>%
dplyr::mutate(visits = 1:length(s_id),
n_visits = max(visits)) %>%
dplyr::filter(n_visits >1) %>%
ungroup()
summary_dataset_3 <- summary_dataset_2 %>%
group_by(s_id) %>%
dplyr::summarise(max_window_prob = approx(x = window_probs_t1, y = time_t,
xout = max(window_probs_t1, na.rm = T))$y # , method = "constant", ties = mean, rule = 2
)
f_t_results <- merged_dataset %>%
dplyr::filter(!is.na(s_id)) %>%
dplyr::mutate(id = paste(s_id, time_t, sep = '_')) %>%
right_join(summary_dataset_3 %>% mutate(id = paste(s_id, max_window_prob, sep = '_'))) %>%
dplyr::mutate(`f_t ide radius` = (t1_f_T - t1)/2,
`f_t ide midpoint` = t1 + `f_t ide radius`) %>%
right_join(pt_dat, by = 's_id') %>%
dplyr::select(s_id, assay_value = assay_value.x, int_length, f_T, window_probs_t1, ide_f_t_lower = t1,
window_size, ide_f_t_upper = t1_f_T, `f_t ide radius`,
`f_t ide midpoint`)
cumulative_posterior <- complete_dataset %>%
# dplyr::filter(time_t > lpddi) %>%
dplyr::filter(!is.na(s_id)) %>%
group_by(s_id) %>%
dplyr::mutate(visits = 1:length(s_id),
n_visits = max(visits)) %>%
dplyr::filter(n_visits >1) %>%
ungroup() %>%
group_by(s_id) %>%
dplyr::mutate(cumsum_posterior = cumsum(bigL)) %>%
dplyr::mutate(f_T = f_T,
t1 = time_t,
window_size= round(int_length * f_T, 0),
t1_f_T = ifelse(t1 + window_size <= int_length, t1 + window_size, int_length)
) %>%
mutate(id  = paste(s_id, t1, sep = '_'))
dt2 <- data.frame(id = NA, f_p = NA, cum_prob = NA, sum_prob = NA, t_1_val = NA, t_2_val = NA, t_diff = NA)
x <- unique(cumulative_posterior$s_id)
for (i in 1:length(unique(cumulative_posterior$s_id))) {
dat <- cumulative_posterior %>%
ungroup() %>%
filter(s_id == x[i]) %>%
dplyr::select(s_id, time_t, cumsum_posterior)
t_1 <- dat$time_t[1]
cum_prob <- dat$cumsum_posterior[1]
max_time <- max(dat$time_t, na.rm = T)
# print(i)
#browser()
dt <- data.frame(id = NA, f_p = NA, cum_prob = NA, sum_prob = NA, t_1_val = NA, t_2_val = NA, t_diff = NA)
while ((cum_prob) < (1 - f_p) && t_1 <= max_time) {
# print(t_1)
prob_sum <- cum_prob + f_p
t_2 <- round(approx(x = dat$cumsum_posterior, y = dat$time_t,
xout = prob_sum)$y, 0) #, method = "constant", ties = mean, rule = 2
dt <- rbind(dt, cbind(id = x[i], f_p = f_p, cum_prob = cum_prob, sum_prob = prob_sum, t_1_val = t_1, t_2_val = t_2, t_diff = t_2 - t_1))
t_1 <- t_1 + 1
cum_prob <- dat$cumsum_posterior[dat$time_t==t_1]
}
dt2 <- rbind(dt2, dt)
}
ide_summary_table <- dt2 %>%
dplyr::filter(!is.na(id)) %>%
group_by(id) %>%
dplyr::mutate(min_diff = min(t_diff, na.rm = T)) %>%
filter(t_diff == min_diff) %>%
dplyr::mutate(ide_lower = min(t_1_val, na.rm = T),
ide_upper = max(t_2_val, na.rm = T)
) %>%
dplyr::mutate(ide_midpoint = ide_lower + (ide_upper-ide_lower)/2,
ide_radius = (ide_upper-ide_lower)/2) %>%
ungroup() %>%
distinct(id, .keep_all = T) %>%
dplyr::select(id, f_p, ide_lower, ide_upper, ide_midpoint, ide_radius) %>%
left_join(f_t_results %>% mutate(id = s_id), by = 'id') %>%
right_join(pt_dat %>% mutate(id = s_id), by = 'id') %>%
# dplyr::mutate(assay_value.y) %>%
dplyr::select(id, assay_value = assay_value.y, f_T, f_p, int_length, `f_p ide lower` = ide_lower, `f_p ide upper` = ide_upper,
`f_p ide midpoint` = ide_midpoint, `f_p ide radius` = ide_radius,
`f_t window prob` = window_probs_t1, `f_t window_size` = window_size, `f_t ide lower` = ide_f_t_lower,
`f_t ide upper` = ide_f_t_upper, `f_t ide midpoint`,
`f_t ide radius`
)
percentiles_table <- complete_dataset %>%
dplyr::mutate(id = paste(s_id, assay_value, sep = '_'))%>%
# filter(time_t > lpddi) %>%
group_by(s_id) %>%
dplyr::mutate(cum_posterior = cumsum(bigL))
View(cumulative_posterior)
View(dt2)
dt2<- dt2 %>% dplyr::filter(!is.na(id))
cumulative_posterior <- complete_dataset %>%
# dplyr::filter(time_t > lpddi) %>%
dplyr::filter(!is.na(s_id)) %>%
group_by(s_id) %>%
dplyr::mutate(visits = 1:length(s_id),
n_visits = max(visits)) %>%
dplyr::filter(n_visits >1) %>%
ungroup() %>%
group_by(s_id) %>%
dplyr::mutate(cumsum_posterior = cumsum(bigL)) %>%
dplyr::mutate(f_T = f_T,
t1 = time_t,
window_size= round(int_length * f_T, 0),
t1_f_T = ifelse(t1 + window_size <= int_length, t1 + window_size, int_length)
) %>%
mutate(id  = paste(s_id, t1, sep = '_'))
dt2 <- data.frame(id = NA, f_p = NA, cum_prob = NA, sum_prob = NA, t_1_val = NA, t_2_val = NA, t_diff = NA)
x <- unique(cumulative_posterior$s_id)
for (i in 1:length(unique(cumulative_posterior$s_id))) {
dat <- cumulative_posterior %>%
ungroup() %>%
filter(s_id == x[i]) %>%
dplyr::select(s_id, time_t, cumsum_posterior)
t_1 <- dat$time_t[1]
cum_prob <- dat$cumsum_posterior[1]
max_time <- max(dat$time_t, na.rm = T)
# print(i)
#browser()
dt <- data.frame(id = NA, f_p = NA, cum_prob = NA, sum_prob = NA, t_1_val = NA, t_2_val = NA, t_diff = NA)
while ((cum_prob) < (1 - f_p) && t_1 <= max_time) {
# print(t_1)
prob_sum <- cum_prob + f_p
t_2 <- approx(x = dat$cumsum_posterior, y = dat$time_t,
xout = prob_sum)$y #, method = "constant", ties = mean, rule = 2
dt <- rbind(dt, cbind(id = x[i], f_p = f_p, cum_prob = cum_prob, sum_prob = prob_sum, t_1_val = t_1, t_2_val = t_2, t_diff = t_2 - t_1))
t_1 <- t_1 + 1
cum_prob <- dat$cumsum_posterior[dat$time_t==t_1]
}
dt2 <- rbind(dt2, dt)
}
ide_summary_table <- dt2 %>%
dplyr::filter(!is.na(id)) %>%
group_by(id) %>%
dplyr::mutate(min_diff = min(t_diff, na.rm = T)) %>%
filter(t_diff == min_diff) %>%
dplyr::mutate(ide_lower = min(t_1_val, na.rm = T),
ide_upper = max(t_2_val, na.rm = T)
) %>%
dplyr::mutate(ide_midpoint = ide_lower + (ide_upper-ide_lower)/2,
ide_radius = (ide_upper-ide_lower)/2) %>%
ungroup() %>%
distinct(id, .keep_all = T) %>%
dplyr::select(id, f_p, ide_lower, ide_upper, ide_midpoint, ide_radius) %>%
left_join(f_t_results %>% mutate(id = s_id), by = 'id') %>%
right_join(pt_dat %>% mutate(id = s_id), by = 'id') %>%
# dplyr::mutate(assay_value.y) %>%
dplyr::select(id, assay_value = assay_value.y, f_T, f_p, int_length, `f_p ide lower` = ide_lower, `f_p ide upper` = ide_upper,
`f_p ide midpoint` = ide_midpoint, `f_p ide radius` = ide_radius,
`f_t window prob` = window_probs_t1, `f_t window_size` = window_size, `f_t ide lower` = ide_f_t_lower,
`f_t ide upper` = ide_f_t_upper, `f_t ide midpoint`,
`f_t ide radius`
)
View(ide_summary_table)
dt2 <- dt2 %>%
dplyr::filter(!is.na(id))
View(dt2)
pt_dat <-  data.frame(s_id = 1, assay_value = c(3.2), lpddi = c(100), epddi = c(425)) #%>% #%>% # read_csv("tbt_dat.csv")d
# source("likelihood_function - geenius.R")
complete_dataset <- data.frame(s_id = NA, lpddi = NA, epddi = NA ,  l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
# assay_value_th_genious <- assay_value_th_genious
GV_interval_step_genious <- 1
pt_dat <-  data.frame(s_id = 1, assay_value = c(3.2), lpddi = c(125), epddi = c(325)) #%>% #%>% # read_csv("tbt_dat.csv")d
# source("likelihood_function - geenius.R")
complete_dataset <- data.frame(s_id = NA, lpddi = NA, epddi = NA ,  l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
# assay_value_th_genious <- assay_value_th_genious
GV_interval_step_genious <- 1
for (j in 1:length(pt_dat$s_id)) {
# browser()
assay_value_th_genious <- pt_dat$assay_value[j]
GV_interval_length_genious <- pt_dat$epddi[j]
lpddi_val = pt_dat$lpddi[j]
dat_combine <- data.frame(s_id = NA, lpddi = NA, epddi = NA , l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
likelihood <- likelihood_fun(
param_datset = likelihood_param_quad_function(
dat = as.matrix(pr_t_logit_cubic_Geenius),
target_assay_value = assay_value_th_genious,
around_assay_value = seq(0.01, 3, .15),
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious) # GV_interval_step_genious
),
assay_value = assay_value_th_genious,
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious), # GV_interval_step_genious,
lpddi_val = lpddi_val
) %>%
dplyr::mutate(assay_value = assay_value_th_genious, s_id = pt_dat$s_id[j],
lpddi = pt_dat$lpddi[j], epddi = pt_dat$epddi[j], int_length = pt_dat$epddi[j]- pt_dat$lpddi[j]) %>%
dplyr::select(s_id, lpddi, epddi, l, time_t, bigL, assay_value, int_length)
# browser()
dat_combine <- rbind(dat_combine, likelihood)
# }
complete_dataset <- rbind(complete_dataset, dat_combine)
}
complete_dataset <- complete_dataset %>%
filter(!is.na(time_t)) %>%
dplyr::mutate(`assay value` = as.factor(assay_value))
plot2 <- ggplot(
data = complete_dataset,
aes(x = time_t, y = bigL, colour = `assay value`)
) +
geom_line(size = 2.0) +
xlab("Date of infection (days)") +
ylab("Posterior Density") +
theme_bw() +
scale_x_reverse(expand = c(0, 0)) +
scale_y_continuous(breaks = c(0)) +
scale_colour_manual(values = c("#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C", "#FB9A99", "#E31A1C")) + # , "#6A3D9A"
coord_fixed(ratio = 1) +
theme(
text = element_text(size = 18),
axis.line = element_line(colour = "black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank(),
panel.border = element_blank(),
aspect.ratio = 1,
plot.margin = unit(c(0, 0, 0, 0), "null")
)
plot2
View(complete_dataset)
View(pr_t_logit_cubic_Geenius)
summary(pr_t_logit_cubic_Geenius)
pt_dat <-  data.frame(s_id = 1, assay_value = c(2.8), lpddi = c(125), epddi = c(325)) #%>% #%>% # read_csv("tbt_dat.csv")d
# source("likelihood_function - geenius.R")
complete_dataset <- data.frame(s_id = NA, lpddi = NA, epddi = NA ,  l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
# assay_value_th_genious <- assay_value_th_genious
GV_interval_step_genious <- 1
for (j in 1:length(pt_dat$s_id)) {
# browser()
assay_value_th_genious <- pt_dat$assay_value[j]
GV_interval_length_genious <- pt_dat$epddi[j]
lpddi_val = pt_dat$lpddi[j]
dat_combine <- data.frame(s_id = NA, lpddi = NA, epddi = NA , l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
likelihood <- likelihood_fun(
param_datset = likelihood_param_quad_function(
dat = as.matrix(pr_t_logit_cubic_Geenius),
target_assay_value = assay_value_th_genious,
around_assay_value = seq(0.01, 3, .15),
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious) # GV_interval_step_genious
),
assay_value = assay_value_th_genious,
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious), # GV_interval_step_genious,
lpddi_val = lpddi_val
) %>%
dplyr::mutate(assay_value = assay_value_th_genious, s_id = pt_dat$s_id[j],
lpddi = pt_dat$lpddi[j], epddi = pt_dat$epddi[j], int_length = pt_dat$epddi[j]- pt_dat$lpddi[j]) %>%
dplyr::select(s_id, lpddi, epddi, l, time_t, bigL, assay_value, int_length)
# browser()
dat_combine <- rbind(dat_combine, likelihood)
# }
complete_dataset <- rbind(complete_dataset, dat_combine)
}
complete_dataset <- complete_dataset %>%
filter(!is.na(time_t)) %>%
dplyr::mutate(`assay value` = as.factor(assay_value))
View(complete_dataset)
View(pr_t_logit_cubic_Geenius)
