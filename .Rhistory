target_assay_value = assay_value_th_genious,
around_assay_value = seq(0.01, 3, .15),
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious) # GV_interval_step_genious
),
assay_value = assay_value_th_genious,
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious), # GV_interval_step_genious,
lpddi_val = lpddi_val
) %>%
dplyr::mutate(assay_value = assay_value_th_genious, s_id = pt_dat$s_id[j],
lpddi = pt_dat$lpddi[j], epddi = pt_dat$epddi[j], int_length = pt_dat$epddi[j]- pt_dat$lpddi[j]) %>%
dplyr::select(s_id, lpddi, epddi, l, time_t, bigL, assay_value, int_length)
# browser()
dat_combine <- rbind(dat_combine, likelihood)
# }
complete_dataset <- rbind(complete_dataset, dat_combine)
}
#' Generates the likelihood of the target assay_value given an inter-test interval.
#' We differentiate a quadratic polynomial and evaluate it, per time point in the inter-test interval, using
#' parameters generated in likelihood_param_quad_function.
#' @param param_datset dataset of intercept (not really important as it doesn't get used),
#' linear, and quadratic terms that are used in evaluating the quad function.
#' @param assay_value is the target assay_value
#' @param t_since_ln vector of time points in the inter-test interval
#'
likelihood_fun <- function(param_datset, assay_value, t_since_ln, lpddi_val) {
# browser()
l <- rep(0, length(t_since_ln))
ff <- expression(1 + param1 * t + param2 * t^2)
f <- D(ff, "t")
counter <- 0
for (j in 1:length(t_since_ln)) {
counter <- counter + 1
param1 <- as.numeric(param_datset$linear_term[[j]])
param2 <- as.numeric(param_datset$quad_term[[j]])
t <- assay_value
l[counter] <- eval(f)
}
browser()
if(is.na(lpddi_val)) {
likelihood <- data.frame(l= ifelse(l<0, 0, l)) %>%#
mutate(
# lpddi_val = rep(lpddi_val, length(t_since_ln)),
time_t = t_since_ln,
bigL = l / (trapz(time_t, l))
)
}else{
# browser()
likelihood_non_normalised <- data.frame(l= ifelse(l<0, 0, l)) %>%#
mutate(t_since_ln = t_since_ln,
l_with_lpddi_offset = ifelse(t_since_ln < lpddi_val,0, l))
auc <- trapz(likelihood_non_normalised$t_since_ln, likelihood_non_normalised$l_with_lpddi_offset)
likelihood_normalised <- likelihood_non_normalised %>%
mutate(
time_t = t_since_ln,
bigL = l_with_lpddi_offset / auc
)
}
return(likelihood_normalised)
}
pt_dat <-  data.frame(s_id = 1, assay_value = c(2.2), lpddi = c(125), epddi = c(325)) #%>% #%>% # read_csv("tbt_dat.csv")d
# source("likelihood_function - geenius.R")
complete_dataset <- data.frame(s_id = NA, lpddi = NA, epddi = NA ,  l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
# assay_value_th_genious <- assay_value_th_genious
GV_interval_step_genious <- 1
for (j in 1:length(pt_dat$s_id)) {
# browser()
assay_value_th_genious <- pt_dat$assay_value[j]
GV_interval_length_genious <- pt_dat$epddi[j]
lpddi_val = pt_dat$lpddi[j]
dat_combine <- data.frame(s_id = NA, lpddi = NA, epddi = NA , l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
likelihood <- likelihood_fun(
param_datset = likelihood_param_quad_function(
dat = as.matrix(pr_t_logit_cubic_Geenius),
target_assay_value = assay_value_th_genious,
around_assay_value = seq(0.01, 3, .15),
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious) # GV_interval_step_genious
),
assay_value = assay_value_th_genious,
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious), # GV_interval_step_genious,
lpddi_val = lpddi_val
) %>%
dplyr::mutate(assay_value = assay_value_th_genious, s_id = pt_dat$s_id[j],
lpddi = pt_dat$lpddi[j], epddi = pt_dat$epddi[j], int_length = pt_dat$epddi[j]- pt_dat$lpddi[j]) %>%
dplyr::select(s_id, lpddi, epddi, l, time_t, bigL, assay_value, int_length)
# browser()
dat_combine <- rbind(dat_combine, likelihood)
# }
complete_dataset <- rbind(complete_dataset, dat_combine)
}
pt_dat <-  data.frame(s_id = 1, assay_value = c(2.5), lpddi = c(125), epddi = c(325)) #%>% #%>% # read_csv("tbt_dat.csv")d
# source("likelihood_function - geenius.R")
complete_dataset <- data.frame(s_id = NA, lpddi = NA, epddi = NA ,  l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
# assay_value_th_genious <- assay_value_th_genious
GV_interval_step_genious <- 1
for (j in 1:length(pt_dat$s_id)) {
# browser()
assay_value_th_genious <- pt_dat$assay_value[j]
GV_interval_length_genious <- pt_dat$epddi[j]
lpddi_val = pt_dat$lpddi[j]
dat_combine <- data.frame(s_id = NA, lpddi = NA, epddi = NA , l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
likelihood <- likelihood_fun(
param_datset = likelihood_param_quad_function(
dat = as.matrix(pr_t_logit_cubic_Geenius),
target_assay_value = assay_value_th_genious,
around_assay_value = seq(0.01, 3, .15),
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious) # GV_interval_step_genious
),
assay_value = assay_value_th_genious,
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious), # GV_interval_step_genious,
lpddi_val = lpddi_val
) %>%
dplyr::mutate(assay_value = assay_value_th_genious, s_id = pt_dat$s_id[j],
lpddi = pt_dat$lpddi[j], epddi = pt_dat$epddi[j], int_length = pt_dat$epddi[j]- pt_dat$lpddi[j]) %>%
dplyr::select(s_id, lpddi, epddi, l, time_t, bigL, assay_value, int_length)
# browser()
dat_combine <- rbind(dat_combine, likelihood)
# }
complete_dataset <- rbind(complete_dataset, dat_combine)
}
summary(1)
summary(l)
pt_dat <-  data.frame(s_id = 1, assay_value = c(2.6), lpddi = c(125), epddi = c(325)) #%>% #%>% # read_csv("tbt_dat.csv")d
# source("likelihood_function - geenius.R")
complete_dataset <- data.frame(s_id = NA, lpddi = NA, epddi = NA ,  l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
# assay_value_th_genious <- assay_value_th_genious
GV_interval_step_genious <- 1
for (j in 1:length(pt_dat$s_id)) {
# browser()
assay_value_th_genious <- pt_dat$assay_value[j]
GV_interval_length_genious <- pt_dat$epddi[j]
lpddi_val = pt_dat$lpddi[j]
dat_combine <- data.frame(s_id = NA, lpddi = NA, epddi = NA , l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
likelihood <- likelihood_fun(
param_datset = likelihood_param_quad_function(
dat = as.matrix(pr_t_logit_cubic_Geenius),
target_assay_value = assay_value_th_genious,
around_assay_value = seq(0.01, 3, .15),
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious) # GV_interval_step_genious
),
assay_value = assay_value_th_genious,
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious), # GV_interval_step_genious,
lpddi_val = lpddi_val
) %>%
dplyr::mutate(assay_value = assay_value_th_genious, s_id = pt_dat$s_id[j],
lpddi = pt_dat$lpddi[j], epddi = pt_dat$epddi[j], int_length = pt_dat$epddi[j]- pt_dat$lpddi[j]) %>%
dplyr::select(s_id, lpddi, epddi, l, time_t, bigL, assay_value, int_length)
# browser()
dat_combine <- rbind(dat_combine, likelihood)
# }
complete_dataset <- rbind(complete_dataset, dat_combine)
}
summary(l)
pt_dat <-  data.frame(s_id = 1, assay_value = c(2.7), lpddi = c(125), epddi = c(325)) #%>% #%>% # read_csv("tbt_dat.csv")d
# source("likelihood_function - geenius.R")
complete_dataset <- data.frame(s_id = NA, lpddi = NA, epddi = NA ,  l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
# assay_value_th_genious <- assay_value_th_genious
GV_interval_step_genious <- 1
for (j in 1:length(pt_dat$s_id)) {
# browser()
assay_value_th_genious <- pt_dat$assay_value[j]
GV_interval_length_genious <- pt_dat$epddi[j]
lpddi_val = pt_dat$lpddi[j]
dat_combine <- data.frame(s_id = NA, lpddi = NA, epddi = NA , l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
likelihood <- likelihood_fun(
param_datset = likelihood_param_quad_function(
dat = as.matrix(pr_t_logit_cubic_Geenius),
target_assay_value = assay_value_th_genious,
around_assay_value = seq(0.01, 3, .15),
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious) # GV_interval_step_genious
),
assay_value = assay_value_th_genious,
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious), # GV_interval_step_genious,
lpddi_val = lpddi_val
) %>%
dplyr::mutate(assay_value = assay_value_th_genious, s_id = pt_dat$s_id[j],
lpddi = pt_dat$lpddi[j], epddi = pt_dat$epddi[j], int_length = pt_dat$epddi[j]- pt_dat$lpddi[j]) %>%
dplyr::select(s_id, lpddi, epddi, l, time_t, bigL, assay_value, int_length)
# browser()
dat_combine <- rbind(dat_combine, likelihood)
# }
complete_dataset <- rbind(complete_dataset, dat_combine)
}
summary(l)
pt_dat <-  data.frame(s_id = 1, assay_value = c(3.5), lpddi = c(125), epddi = c(1000)) #%>% #%>% # read_csv("tbt_dat.csv")d
# source("likelihood_function - geenius.R")
complete_dataset <- data.frame(s_id = NA, lpddi = NA, epddi = NA ,  l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
# assay_value_th_genious <- assay_value_th_genious
GV_interval_step_genious <- 1
for (j in 1:length(pt_dat$s_id)) {
# browser()
assay_value_th_genious <- pt_dat$assay_value[j]
GV_interval_length_genious <- pt_dat$epddi[j]
lpddi_val = pt_dat$lpddi[j]
dat_combine <- data.frame(s_id = NA, lpddi = NA, epddi = NA , l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
likelihood <- likelihood_fun(
param_datset = likelihood_param_quad_function(
dat = as.matrix(pr_t_logit_cubic_Geenius),
target_assay_value = assay_value_th_genious,
around_assay_value = seq(0.01, 3, .15),
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious) # GV_interval_step_genious
),
assay_value = assay_value_th_genious,
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious), # GV_interval_step_genious,
lpddi_val = lpddi_val
) %>%
dplyr::mutate(assay_value = assay_value_th_genious, s_id = pt_dat$s_id[j],
lpddi = pt_dat$lpddi[j], epddi = pt_dat$epddi[j], int_length = pt_dat$epddi[j]- pt_dat$lpddi[j]) %>%
dplyr::select(s_id, lpddi, epddi, l, time_t, bigL, assay_value, int_length)
# browser()
dat_combine <- rbind(dat_combine, likelihood)
# }
complete_dataset <- rbind(complete_dataset, dat_combine)
}
summary(l)
pt_dat <-  data.frame(s_id = 1, assay_value = c(3.5), lpddi = c(125), epddi = c(2000)) #%>% #%>% # read_csv("tbt_dat.csv")d
# source("likelihood_function - geenius.R")
complete_dataset <- data.frame(s_id = NA, lpddi = NA, epddi = NA ,  l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
# assay_value_th_genious <- assay_value_th_genious
GV_interval_step_genious <- 1
for (j in 1:length(pt_dat$s_id)) {
# browser()
assay_value_th_genious <- pt_dat$assay_value[j]
GV_interval_length_genious <- pt_dat$epddi[j]
lpddi_val = pt_dat$lpddi[j]
dat_combine <- data.frame(s_id = NA, lpddi = NA, epddi = NA , l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
likelihood <- likelihood_fun(
param_datset = likelihood_param_quad_function(
dat = as.matrix(pr_t_logit_cubic_Geenius),
target_assay_value = assay_value_th_genious,
around_assay_value = seq(0.01, 3, .15),
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious) # GV_interval_step_genious
),
assay_value = assay_value_th_genious,
t_since_ln = seq(0, GV_interval_length_genious, GV_interval_step_genious), # GV_interval_step_genious,
lpddi_val = lpddi_val
) %>%
dplyr::mutate(assay_value = assay_value_th_genious, s_id = pt_dat$s_id[j],
lpddi = pt_dat$lpddi[j], epddi = pt_dat$epddi[j], int_length = pt_dat$epddi[j]- pt_dat$lpddi[j]) %>%
dplyr::select(s_id, lpddi, epddi, l, time_t, bigL, assay_value, int_length)
# browser()
dat_combine <- rbind(dat_combine, likelihood)
# }
complete_dataset <- rbind(complete_dataset, dat_combine)
}
summary(l)
source("pct_curves_uniroot-generic.R")
source("likelihood_function - generic.R")
pct_vs_t_logit_cubic_Geenius <- readRDS("data/pct_data_logitcubic_Geenius.rds")
# likelihood data
pr_t_logit_cubic_Geenius <- readRDS("data/pr_t_logit_evaluations_Geenius.rds")
pr_t_loglog_cubic_Geenius <- readRDS("data/pr_t_loglog_evaluations_Geenius.rds")
f_T <- 0.2
f_p <- .5
pt_dat <-  data.frame(s_id = 1, assay_value = c(3.5), lpddi = c(125), epddi = c(2000)) #%>% #%>% # read_csv("tbt_dat.csv")d
# source("likelihood_function - geenius.R")
complete_dataset <- data.frame(s_id = NA, lpddi = NA, epddi = NA ,  l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
# assay_value_th_genious <- assay_value_th_genious
GV_interval_step_genious <- 1
for (j in 1:length(pt_dat$s_id)) {
# browser()
assay_value_th_genious <- pt_dat$assay_value[j]
GV_interval_length_genious <- pt_dat$epddi[j]
lpddi_val = pt_dat$lpddi[j]
dat_combine <- data.frame(s_id = NA, lpddi = NA, epddi = NA , l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
likelihood <- likelihood_fun(
param_datset = likelihood_param_quad_function(
dat = as.matrix(pr_t_logit_cubic_Geenius),
target_assay_value = assay_value_th_genious,
around_assay_value = seq(0.01, 3, .15),
time_t = seq(0, GV_interval_length_genious, GV_interval_step_genious) # GV_interval_step_genious
),
assay_value = assay_value_th_genious,
time_t = seq(0, GV_interval_length_genious, GV_interval_step_genious), # GV_interval_step_genious,
lpddi_val = lpddi_val
) %>%
dplyr::mutate(assay_value = assay_value_th_genious, s_id = pt_dat$s_id[j],
lpddi = pt_dat$lpddi[j], epddi = pt_dat$epddi[j], int_length = pt_dat$epddi[j]- pt_dat$lpddi[j]) %>%
dplyr::select(s_id, lpddi, epddi, l, time_t, bigL, assay_value, int_length)
# browser()
dat_combine <- rbind(dat_combine, likelihood)
# }
complete_dataset <- rbind(complete_dataset, dat_combine)
}
source("likelihood_function - generic.R")
names(pr_t_logit_cubic_Geenius)
pr_t_plot <- ggplot(
data = pr_t_logit_cubic_Geenius %>%
filter(threshold %in% c(2, 2.5, 3, 3.5)) %>%
mutate(`Assay threshold` = threshold, time_var = GV_vec_time),
aes(x = time_var, y = pr_t, group = `Assay threshold`, colour = `Assay threshold`)
) +
geom_line(size = 2.2) +
# geom_smooth(se = F, span = 1, size = 1.5) +
xlab("Time since infection (days)") +
ylab("P_r (t)") +
theme_bw() +
scale_x_continuous(limits = c(0, 610), breaks = c(seq(0, 610, 100)), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 1 + .02), breaks = c(seq(0, 1, .5)), expand = c(0, 0)) +
scale_colour_manual(values = c("#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C", "#FB9A99", "#E31A1C", "#FDBF6F", "#FF7F00", "#CAB2D6", "#6A3D9A")) + #scale_colour_brewer(palette = "Paired")) +
theme(
text = element_text(size = 18),
plot.title = element_text(hjust = 0.5),
axis.line = element_line(colour = "black"), # panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
panel.background = element_blank(),
panel.border = element_blank(),
aspect.ratio = 1,
plot.margin=unit(c(0,0,0,0), "null")
)
pr_t_plot
pr_t_plot <- ggplot(
data = pr_t_logit_cubic_Geenius %>%
filter(threshold %in% c(2, 2.5, 3, 3.5)) %>%
mutate(`Assay threshold` = threshold, time_var = GV_vec_time),
aes(x = time_var, y = pr_t, group = `Assay threshold`, colour = `Assay threshold`)
) +
geom_line(size = 2.2) +
# geom_smooth(se = F, span = 1, size = 1.5) +
xlab("Time since infection (days)") +
ylab("P_r (t)") +
theme_bw() +
scale_x_continuous(limits = c(0, 610), breaks = c(seq(0, 610, 100)), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 1 + .02), breaks = c(seq(0, 1, .5)), expand = c(0, 0)) +
# scale_colour_manual(values = c("#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C", "#FB9A99", "#E31A1C", "#FDBF6F", "#FF7F00", "#CAB2D6", "#6A3D9A")) + #scale_colour_brewer(palette = "Paired")) +
theme(
text = element_text(size = 18),
plot.title = element_text(hjust = 0.5),
axis.line = element_line(colour = "black"), # panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
panel.background = element_blank(),
panel.border = element_blank(),
aspect.ratio = 1,
plot.margin=unit(c(0,0,0,0), "null")
)
pr_t_plot
pt_dat <-  data.frame(s_id = 1, assay_value = c(3.5), lpddi = c(125), epddi = c(2000)) #%>% #%>% # read_csv("tbt_dat.csv")d
# source("likelihood_function - geenius.R")
complete_dataset <- data.frame(s_id = NA, lpddi = NA, epddi = NA ,  l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
# assay_value_th_genious <- assay_value_th_genious
GV_interval_step_genious <- 1
for (j in 1:length(pt_dat$s_id)) {
# browser()
assay_value_th_genious <- pt_dat$assay_value[j]
GV_interval_length_genious <- pt_dat$epddi[j]
lpddi_val = pt_dat$lpddi[j]
dat_combine <- data.frame(s_id = NA, lpddi = NA, epddi = NA , l = NA, time_t = NA, bigL = NA, assay_value  = NA, int_length = NA)
likelihood <- likelihood_fun(
param_datset = likelihood_param_quad_function(
dat = as.matrix(pr_t_logit_cubic_Geenius),
target_assay_value = assay_value_th_genious,
around_assay_value = seq(0.01, 3, .15),
time_t = seq(0, GV_interval_length_genious, GV_interval_step_genious) # GV_interval_step_genious
),
assay_value = assay_value_th_genious,
time_t = seq(0, GV_interval_length_genious, GV_interval_step_genious), # GV_interval_step_genious,
lpddi_val = lpddi_val
) %>%
dplyr::mutate(assay_value = assay_value_th_genious, s_id = pt_dat$s_id[j],
lpddi = pt_dat$lpddi[j], epddi = pt_dat$epddi[j], int_length = pt_dat$epddi[j]- pt_dat$lpddi[j]) %>%
dplyr::select(s_id, lpddi, epddi, l, time_t, bigL, assay_value, int_length)
# browser()
dat_combine <- rbind(dat_combine, likelihood)
# }
complete_dataset <- rbind(complete_dataset, dat_combine)
}
complete_dataset <- complete_dataset %>%
filter(!is.na(time_t)) %>%
dplyr::mutate(`assay value` = as.factor(assay_value))
plot2 <- ggplot(
data = complete_dataset,
aes(x = time_t, y = bigL, colour = `assay value`)
) +
geom_line(size = 2.0) +
xlab("Date of infection (days)") +
ylab("Posterior Density") +
theme_bw() +
scale_x_reverse(expand = c(0, 0)) +
scale_y_continuous(limits = c(0, max(complete_dataset$bigL) + .02)) + #, breaks = c(0)
scale_colour_manual(values = c("#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C", "#FB9A99", "#E31A1C")) + # , "#6A3D9A"
coord_fixed(ratio = 1) +
theme(
text = element_text(size = 18),
axis.line = element_line(colour = "black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank(),
panel.border = element_blank(),
aspect.ratio = 1,
plot.margin = unit(c(0, 0, 0, 0), "null")
)
plot2
plot2 <- ggplot(
data = complete_dataset,
aes(x = time_t, y = bigL, colour = `assay value`)
) +
geom_line(size = 2.0) +
xlab("Date of infection (days)") +
ylab("Posterior Density") +
theme_bw() +
scale_x_reverse(expand = c(0, 0)) +
scale_y_continuous(limits = c(0, max(complete_dataset$bigL) + .02), breaks = c(0)) +
scale_colour_manual(values = c("#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C", "#FB9A99", "#E31A1C")) + # , "#6A3D9A"
coord_fixed(ratio = 1) +
theme(
text = element_text(size = 18),
axis.line = element_line(colour = "black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank(),
panel.border = element_blank(),
aspect.ratio = 1,
plot.margin = unit(c(0, 0, 0, 0), "null")
)
plot2
str(complete_dataset)
pr_t_plot <- ggplot(
data = pr_t_logit_cubic_Geenius %>%
filter(threshold %in% c(2, 2.5, 3, 3.5)) %>%
mutate(`Assay threshold` = as.factor(threshold), time_var = GV_vec_time),
aes(x = time_var, y = pr_t, group = `Assay threshold`, colour = `Assay threshold`)
) +
geom_line(size = 2.2) +
# geom_smooth(se = F, span = 1, size = 1.5) +
xlab("Time since infection (days)") +
ylab("P_r (t)") +
theme_bw() +
scale_x_continuous(limits = c(0, 610), breaks = c(seq(0, 610, 100)), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 1 + .02), breaks = c(seq(0, 1, .5)), expand = c(0, 0)) +
scale_colour_manual(values = c("#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C", "#FB9A99", "#E31A1C", "#FDBF6F", "#FF7F00", "#CAB2D6", "#6A3D9A")) + #scale_colour_brewer(palette = "Paired")) +
theme(
text = element_text(size = 18),
plot.title = element_text(hjust = 0.5),
axis.line = element_line(colour = "black"), # panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
panel.background = element_blank(),
panel.border = element_blank(),
aspect.ratio = 1,
plot.margin=unit(c(0,0,0,0), "null")
)
pr_t_plot
plot2 <- ggplot(
data = complete_dataset,
aes(x = time_t, y = bigL, colour = `assay value`)
) +
geom_line(size = 2.0) +
xlab("Date of infection (days)") +
ylab("Posterior Density") +
theme_bw() +
scale_x_reverse(expand = c(0, 0)) +
scale_y_continuous(limits = c(0, max(complete_dataset$bigL) + .02), breaks = c(0), expand = c(0, 0)) +
scale_colour_manual(values = c("#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C", "#FB9A99", "#E31A1C")) + # , "#6A3D9A"
coord_fixed(ratio = 1) +
theme(
text = element_text(size = 18),
axis.line = element_line(colour = "black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank(),
panel.border = element_blank(),
aspect.ratio = 1,
plot.margin = unit(c(0, 0, 0, 0), "null")
)
plot2
pr_t_plot <- ggplot(
data = pr_t_logit_cubic_Geenius %>%
filter(threshold %in% c(2, 2.5, 3, 3.5)) %>%
mutate(`Assay threshold` = as.factor(threshold), time_var = GV_vec_time),
aes(x = time_var, y = pr_t, group = `Assay threshold`, colour = `Assay threshold`)
) +
geom_line(size = 2.2) +
# geom_smooth(se = F, span = 1, size = 1.5) +
xlab("Time since infection (days)") +
ylab("P_r (t)") +
theme_bw() +
scale_x_continuous(limits = c(0, 3000), breaks = c(seq(0, 3000, 500)), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 1 + .02), breaks = c(seq(0, 1, .5)), expand = c(0, 0)) +
scale_colour_manual(values = c("#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C", "#FB9A99", "#E31A1C", "#FDBF6F", "#FF7F00", "#CAB2D6", "#6A3D9A")) + #scale_colour_brewer(palette = "Paired")) +
theme(
text = element_text(size = 18),
plot.title = element_text(hjust = 0.5),
axis.line = element_line(colour = "black"), # panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
panel.background = element_blank(),
panel.border = element_blank(),
aspect.ratio = 1,
plot.margin=unit(c(0,0,0,0), "null")
)
pr_t_plot
plot2 <- ggplot(
data = complete_dataset,
aes(x = time_t, y = bigL, colour = `assay value`)
) +
geom_line(size = 2.0) +
xlab("Date of infection (days)") +
ylab("Posterior Density") +
theme_bw() +
scale_x_reverse(expand = c(0, 0)) +
scale_y_continuous(breaks = c(0), expand = c(0, 0)) +
scale_colour_manual(values = c("#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C", "#FB9A99", "#E31A1C")) + # , "#6A3D9A"
coord_fixed(ratio = 1) +
theme(
text = element_text(size = 18),
axis.line = element_line(colour = "black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank(),
panel.border = element_blank(),
aspect.ratio = 1,
plot.margin = unit(c(0, 0, 0, 0), "null")
)
plot2
View(complete_dataset)
